@model PortfolioModel

@{ bool isNew = !(Model != null && Model.Id > 0); }


@using (Html.BeginForm())
{

    <div class="pageContainer">
        @Html.Partial("_Breadcrumb", "Manage Portfolio")

        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @class = "text-danger" })

        <ul class="nav nav-bordered" id="component-1" role="tablist">
            <li class="nav-item">
                <a class="nav-link active show" data-toggle="tab" href="#component-1-1" role="tab" aria-controls="component-1-1" aria-selected="true">
                    <i class="fas fa-pencil-alt fs-14 mr-1"></i> General
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#component-1-2" role="tab" aria-controls="component-1-2" aria-selected="false">
                    <i class="fa fa-images fs-14 mr-1"></i> Gallery
                </a>
            </li>
        </ul>

        <div class="tab-content mt-4" id="component-1-content">
            <div class="tab-pane fade show active" id="component-1-1" role="tabpanel" aria-labelledby="component-1-1">

                <div class="row">

                    <div class="col-md-12">
                        @if (!isNew)
                        {
                            <div class="mb-4">
                                @Html.LabelFor(x => x.Url, new { @class = "m-0 fs-14 mr-2" })
                                <a href="@Model.Url" target="_blank" class="m-link">@Model.Url</a> <i class="fas fa-external-link-alt ml-1 fs-13 text-primary"></i>
                            </div>
                            @Html.HiddenFor(x => x.Url)
                        }

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                                    @Html.LabelFor(x => x.Title, new { @class = "m-0 fs-14" })
                                </span>
                            </div>
                            @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
                        </div>

                        <div class="form-group">
                            <span class="text-danger">@Html.ValidationMessageFor(x => x.Content)</span>
                            @Html.Vertex().HtmlEditorFor(x => x.Content)
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            <i class="fa fa-eye mr-3 fs-14"></i>
                                            @Html.LabelFor(x => x.ViewName, new { @class = "m-0 fs-14" })
                                        </span>
                                    </div>
                                    @Html.DropDownListFor(x => x.ViewName, new SelectList(Model.AvailableViewNames), "Select", new { @class = "form-control", })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                                            @Html.LabelFor(x => x.PortfolioFormat, new { @class = "m-0 fs-14" })
                                        </span>
                                    </div>

                                    @Html.DropDownListFor(x => x.PortfolioFormat, new SelectList(Model.PortfolioFormats), "Select", new { @class = "form-control", })
                                </div>
                            </div>
                        </div>

                        <div class="input-group mb-3" id="postFormatValueWrap" style="display:none">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                                    @Html.LabelFor(x => x.PortfolioFormatValue, new { @class = "m-0 fs-14", @id = "postFormatValueLabel" })
                                </span>
                            </div>
                            @Html.TextBoxFor(x => x.PortfolioFormatValue, new { @class = "form-control", })
                        </div>

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                                    @Html.LabelFor(x => x.CategoryId, new { @class = "m-0 fs-14" })
                                </span>
                            </div>
                            @Html.DropDownListFor(x => x.CategoryId, new SelectList(Model.Categories, "Id", "Name"), "Select Category", new { @class = "form-control" })
                        </div>

                        <div class="row">
                            <div class="col-sm-offset-2 col-sm-10">
                                <div class="form-group mt-4 pt-4 border-top">
                                    <button type="submit" name="action:@(isNew ? "Create": "Edit")" class="btn btn-primary btn-sm btn-wide transition-hover mr-2">
                                        <i class="fa fa-save mr-1 fs-14"></i> Save
                                    </button>

                                    @if (!isNew)
                                    {
                                        @(Html.Vertex().ConfirmModal("Delete", "Portfolio", new { @id = Model.Id })
                                            .Title("Confirm Delete")
                                            .Content("Are you sure do you want to delete ?")
                                            .For(Html.Vertex().Button().Text("Delete").Color(BootstrapColor.Secondary).Size(ButtonSize.Small))
                                        )
                                    }

                                    <div class="d-inline-block">
                                        <span class="mx-2 text-light font-weight-light fs-15">or</span>
                                        <i class="fas fa-long-arrow-alt-left fs-13 text-primary o-8"></i>
                                        <a href="@Url.Action("List", "Portfolio")" class="m-link fs-15"> Back to list</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="component-1-2" role="tabpanel" aria-labelledby="component-1-2">
                <div class="row">
                    <div class="col-md-12">

                        @Html.Partial("_PortfolioPictures", Model)

                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="component-1-3" role="tabpanel" aria-labelledby="component-1-3">
                <div class="row">
                    <div class="col-md-12">
                        <p>
                            View Count: <strong class="text-dark">@Model.ViewCount</strong>
                        </p>
                    </div>
                </div>
            </div>
        </div>

    </div>



    <div class="pageSide">
        <ul class="js-scroll-nav duik-content-nav">
            <li class="duik-content-nav__item">
                <div class="form-group mb-4">
                    <p class="mb-1">Media</p>
                    @(Html.Vertex().PictureUploaderFor(x => x.PictureId).EntityName("Post").Circle(false).Width("200px").Height("175px").DefaultPictureUrl(""))
                </div>
            </li>
            <li>
                <div class="form-group mb-3">
                    <div class="custom-control custom-checkbox">
                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "custom-control-input" })
                        @Html.LabelFor(m => m.IsActive, new { @class = "custom-control-label" })
                    </div>
                </div>
            </li>
            <li>
                <div class="disabled mb-3">
                    @Html.LabelFor(x => x.CreateDate, new { @class = "m-0 fs-14" })
                    @Html.TextBoxFor(x => x.CreateDate, new { @class = "form-control form-control-sm", @disabled = true })
                </div>

                @if (!isNew)
                {
                    <div class="disabled mb-3">
                        @Html.LabelFor(x => x.UpdateDate, new { @class = "m-0 fs-14" })
                        @Html.TextBoxFor(x => x.UpdateDate, new { @class = "form-control form-control-sm", @disabled = true })
                    </div>
                }
            </li>
            @if (!isNew)
            {
                <li>
                    <p>
                        View Count: <strong class="text-dark">@Model.ViewCount</strong>
                    </p>
                </li>

                <li class="duik-content-nav__item contents mt-4">Actions</li>
                <li>
                    <a class="btn btn-sleek-primary btn-sm btn-block transition-hover" href="@Url.Action("Create", "Portfolio")">
                        <i class="fa fa-plus mr-1 fs-12"></i> Add New
                    </a>
                </li>
            }
        </ul>
    </div>
}



<script type="text/javascript">
    $(document).ready(function () {
        $("#PortfolioFormat").change(togglePortfolioFormat);
        togglePortfolioFormat();
    });

    function togglePortfolioFormat() {
        var selectedPortfolioFormat = $("#PortfolioFormat").val();

        if (selectedPortfolioFormat == 'Standard') {
            $('#postFormatValueWrap').hide();
        }
        else {
            $('#postFormatValueWrap').show();
            if (selectedPortfolioFormat == '@Vertex.Core.Entities.PortfolioFormat.Video') {
                $('#postFormatValueLabel').text("Video Embed");
            } else if (selectedPortfolioFormat == '@Vertex.Core.Entities.PortfolioFormat.Audio') {
                $('#postFormatValueLabel').text("Audio URL");
            } else if (selectedPortfolioFormat == '@Vertex.Core.Entities.PortfolioFormat.Quote') {
                $('#postFormatValueLabel').text("Quote");
            }
        }
    }
</script>