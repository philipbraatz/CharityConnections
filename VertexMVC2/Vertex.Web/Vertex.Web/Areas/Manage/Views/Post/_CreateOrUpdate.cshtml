@model PostModel

@{ bool isNew = !(Model != null && Model.Id > 0); }


@using (Html.BeginForm())
{
    <div class="pageContainer">
        @Html.Partial("_Breadcrumb", "Manage Post")

        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @class = "text-danger" })

        <ul class="nav nav-bordered" id="component-1" role="tablist">
            <li class="nav-item">
                <a class="nav-link active show" data-toggle="tab" href="#component-1-1" role="tab" aria-controls="component-1-1" aria-selected="true">
                    <i class="fas fa-pencil-alt fs-14 mr-1"></i> General
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#component-1-2" role="tab" aria-controls="component-1-2" aria-selected="false">
                    <i class="fa fa-comments fs-14 mr-1"></i> Comments
                </a>
            </li>
        </ul>
        <div class="tab-content mt-4" id="component-1-content">
            <div class="tab-pane fade show active" id="component-1-1" role="tabpanel" aria-labelledby="component-1-1">
                @if (!isNew)
                {
                    <div class="mb-4">
                        @Html.LabelFor(x => x.Url, new { @class = "m-0 fs-14 mr-2" })
                        <a href="/@Model.Url" target="_blank" class="m-link">@Model.Url</a>
                        <i class="fas fa-external-link-alt ml-1 mr-1 fs-13 text-primary"></i>
                    </div>
                    @Html.HiddenFor(x => x.Url)
                }

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                            @Html.LabelFor(x => x.Title, new { @class = "m-0 fs-14" })
                        </span>
                    </div>
                    @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    <span class="text-danger">@Html.ValidationMessageFor(x => x.FullContent)</span>
                    @Html.Vertex().HtmlEditorFor(x => x.FullContent)
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fa fa-eye mr-3 fs-14"></i>
                                    @Html.LabelFor(x => x.ViewName, new { @class = "m-0 fs-14" })
                                </span>
                            </div>
                            @Html.DropDownListFor(x => x.ViewName, new SelectList(Model.AvailableViewNames), "Select", new { @class = "form-control", })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                                    @Html.LabelFor(x => x.PostFormat, new { @class = "m-0 fs-14" })
                                </span>
                            </div>

                            @Html.DropDownListFor(x => x.PostFormat, new SelectList(Model.PostFormats), "Select", new { @class = "form-control", })
                        </div>
                    </div>
                </div>

                <div class="input-group mb-3" id="postFormatValueWrap" style="display:none">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                            @Html.LabelFor(x => x.PostFormatValue, new { @class = "m-0 fs-14", @id = "postFormatValueLabel" })
                        </span>
                    </div>
                    @Html.TextBoxFor(x => x.PostFormatValue, new { @class = "form-control", })
                </div>

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                            @Html.LabelFor(x => x.CategoryId, new { @class = "m-0 fs-14" })
                        </span>
                    </div>
                    @Html.DropDownListFor(x => x.CategoryId, new SelectList(Model.Categories, "Id", "Name"), "Select Category", new { @class = "form-control" })
                </div>

                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text pr-2">
                            <i class="fa fa-tags mr-3 fs-14"></i>
                            @Html.LabelFor(x => x.Tags, new { @class = "m-0 fs-14" })
                        </span>
                    </div>
                    @Html.ListBoxFor(model => model.Tags, Model.AvailableTags, new { @class = "form-control", multiple = "multiple", data_tags = "true" })
                </div>

                <div class="row">
                    <div class="col-sm-offset-2 col-sm-10">
                        <div class="form-group mt-4 pt-4 border-top">
                            <button type="submit" name="action:@(isNew ? "Create": "Edit")" class="btn btn-primary btn-sm btn-wide transition-hover mr-2">
                                <i class="fa fa-save mr-1 fs-14"></i> Save
                            </button>

                            @if (!isNew)
                            {
                                @(Html.Vertex().ConfirmModal("Delete", "Post", new { @id = Model.Id })
                                            .Title("Confirm Delete")
                                            .Content("Are you sure do you want to delete ?")
                                            .For(Html.Vertex().Button().Text("Delete").Color(BootstrapColor.Secondary).Size(ButtonSize.Small))
                                )
                            }

                            <div class="d-inline-block">
                                <span class="mx-2 text-light font-weight-light fs-15">or</span>
                                <i class="fas fa-long-arrow-alt-left fs-13 text-primary o-8"></i>
                                <a href="@Url.Action("List", "Post")" class="m-link fs-15"> Back to list</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="component-1-2" role="tabpanel" aria-labelledby="component-1-2">
                <div class="row">
                    <div class="col-md-12">
                        @(Html.Telerik().Grid<CommentListModel>()
                            .Name("SocialIcons")
                            .BindTo(Model.Comments)
                            .DataKeys(keys => { keys.Add(x => x.Id); })
                            .DataBinding(dataBinding =>
                            {
                                dataBinding.Ajax()
                                    .Select("CommentList", "Post", new { postId = Model.Id })
                                    .Update("CommentUpdate", "Post", new { postId = Model.Id })
                                    .Delete("CommentDelete", "Post");
                            })
                            .Columns(columns =>
                            {
                                columns.Bound(x => x.IsMember).Centered();
                                columns.Bound(x => x.FullName).Width("20%");
                                columns.Bound(x => x.Comment).Width("500px");
                                columns.Bound(x => x.Approved).Centered().Width("6%");
                                columns.Command(commands =>
                                        {
                                                  commands.Edit();
                                                  commands.Delete();
                                              }).HtmlAttributes(new { align = "right" }).Width("27%");
                            })
                        )
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="pageSide">
        <ul class="js-scroll-nav duik-content-nav">
            <li class="duik-content-nav__item">
                <div class="form-group mb-4">
                    <p class="mb-1">Media</p>
                    @(Html.Vertex().PictureUploaderFor(x => x.PictureId).EntityName("Post").Circle(false).Width("200px").Height("120px").DefaultPictureUrl(""))
                </div>
            </li>
            <li>
                <div class="form-group mb-1">
                    <div class="custom-control custom-checkbox">
                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "custom-control-input" })
                        @Html.LabelFor(m => m.IsActive, new { @class = "custom-control-label" })
                    </div>
                </div>

                <div class="form-group mb-1">
                    <div class="custom-control custom-checkbox">
                        @Html.CheckBoxFor(m => m.AllowComment, new { @class = "custom-control-input" })
                        @Html.LabelFor(m => m.AllowComment, new { @class = "custom-control-label" })
                    </div>
                </div>

                <div class="form-group mb-4">
                    <div class="custom-control custom-checkbox">
                        @Html.CheckBoxFor(m => m.ApproveComment, new { @class = "custom-control-input" })
                        @Html.LabelFor(m => m.ApproveComment, new { @class = "custom-control-label" })
                    </div>
                </div>

            </li>
            <li>
                <div class="disabled mb-3">
                    @*<div class="input-group-prepend">
                            <span class="input-group-text">
                                <i class="fa fa-calendar-alt mr-3 fs-14"></i>
                                @Html.LabelFor(x => x.CreateDate, new { @class = "m-0 fs-14" })
                            </span>
                        </div>*@
                    @Html.LabelFor(x => x.CreateDate, new { @class = "m-0 fs-14" })
                    @Html.TextBoxFor(x => x.CreateDate, new { @class = "form-control form-control-sm", @disabled = true })
                </div>

                @if (!isNew)
                {
                    <div class="disabled mb-3">
                        @*<div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="fa fa-calendar-alt mr-3 fs-14"></i>
                                    @Html.LabelFor(x => x.UpdateDate, new { @class = "m-0 fs-14" })
                                </span>
                            </div>*@
                        @Html.LabelFor(x => x.UpdateDate, new { @class = "m-0 fs-14" })
                        @Html.TextBoxFor(x => x.UpdateDate, new { @class = "form-control form-control-sm", @disabled = true })
                    </div>
                }
            </li>

            @if (!isNew)
            {
                <li>
                    <p>
                        View Count: <strong class="text-dark">@Model.ViewCount</strong>
                    </p>
                </li>

                <li class="duik-content-nav__item contents mt-4">Actions</li>
                <li>
                    <a class="btn btn-sleek-primary btn-sm btn-block transition-hover" href="@Url.Action("Create", "Post")">
                        <i class="fa fa-plus mr-1 fs-12"></i> Add New
                    </a>
                </li>
            }


        </ul>
    </div>
}



<script type="text/javascript">
    $(document).ready(function () {
        $("#PostFormat").change(togglePostFormat);
        togglePostFormat();
    });

    function togglePostFormat() {
        var selectedPostFormat = $("#PostFormat").val();

        if (selectedPostFormat == 'Standard') {
            $('#postFormatValueWrap').hide();
        }
        else {
            $('#postFormatValueWrap').show();
            if (selectedPostFormat == '@Vertex.Core.Entities.PostFormat.Video') {
                $('#postFormatValueLabel').text("Video Embed");
            } else if (selectedPostFormat == '@Vertex.Core.Entities.PostFormat.Audio') {
                $('#postFormatValueLabel').text("Audio URL");
            } else if (selectedPostFormat == '@Vertex.Core.Entities.PostFormat.Quote') {
                $('#postFormatValueLabel').text("Quote");
            }
        }
    }
</script>